/*
 * What follows is how to replace the built in CRUD mutations for the my_table
 * table with functions. This is currently only an approximation, but hopefully
 * will be better supported in future.
 */

-- First, disable the default CRUD mutation on this table
comment on table my_table is E'@omit create,update,delete';

/*** CREATE ***/

-- Now add a create mutation that emulates the autogenerated create mutation
create function create_my_table(my_table my_table) returns my_table as $$
  insert into my_table (name, description) values (create_my_table.my_table.name, create_my_table.my_table.description);
  -- Or, if you prefer:
  --   insert into my_table (name, description) values ($1.name, $1.description);
$$ language sql volatile set search_path from current strict;

/* 
 * (By default this will use the input type for create inputs, if you need to
 * use a different input type for the table record, see the update
 * documentation below)
 */


/*** UPDATE ***/

-- Update mutations take two inputs
create function create_my_table(patch_my_table my_table) returns my_table as $$
  insert into my_table (name, description) values (create_my_table.my_table.name, create_my_table.my_table.description);
  -- Or, if you prefer:
  --   insert into my_table (name, description) values ($1.name, $1.description);
$$ language sql volatile set search_path from current strict;

-- This tells the system to use the "patch" input type, rather than the default "create" input type
comment on function update_my_table_by_id(my_table, int) is E'arg0variant patch';
/* 
 * If you prefer, you could use a fully nullable input type with all columns
 * present (equivalent to the patch input unless you're using
 * `--no-ignore-rbac`):
 *
 *   comment on function create_my_table(my_table) is E'arg0variant base';
 */
```
)